name: main

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: auditum_db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 1s
          --health-timeout 10s
          --health-retries 10
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Setup Go
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          go-version-file: 'go.mod'

      - name: Download dependencies
        run: |
          go mod download

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic $(go list ./...)

      - name: Run linter
        uses: golangci/golangci-lint-action@3a919529898de77ec3da873e3063ca4b10e7f5cc # v3.7.0
        with:
          version: v1.52.2
          args: --verbose
          # See: https://github.com/golangci/golangci-lint-action/issues/244
          skip-pkg-cache: true
          skip-build-cache: true

      - name: Build
        run: |
          go build -v -o ./bin/auditum ./cmd/auditum

      - name: Run integration tests
        env:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_DBNAME: auditum_db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_SSL_MODE: disable
        run: |
          go test \
            -tags "integration postgres" \
            -v \
            -p 1 \
            -count 1 \
            ./internal/sql/... \
            -run "TestIntegration"
          go test \
            -tags "integration sqlite" \
            -v \
            -p 1 \
            -count 1 \
            ./internal/sql/... \
            -run "TestIntegration"

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_REGISTRY_GITHUB: ghcr.io
      IMAGE_NAME_GITHUB: ${{ github.repository }}
      IMAGE_NAME_DOCKERHUB_AUDITUMIO: auditumio/auditum
      # For PR, we only build for AMD64, just to be sure that Docker build works.
      # For main branch and tags we also build for ARM64.
      # Note that building for ARM64 is very slow.
      IMAGE_PLATFORMS: |
        linux/amd64
        ${{ github.event_name != 'pull_request' && 'linux/arm64' || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Setup Go
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          go-version-file: 'go.mod'

      - name: Download dependencies
        run: |
          go mod download
          go mod vendor

      - name: Extract Docker image metadata
        id: docker_meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4.6.0
        with:
          images: |
            ${{ env.IMAGE_NAME_DOCKERHUB_AUDITUMIO }}
            ${{ env.IMAGE_REGISTRY_GITHUB }}/${{ env.IMAGE_NAME_GITHUB }}
          tags: |
            type=ref,event=pr
            type=ref,event=branch,enable={{ is_default_branch }}
            type=semver,pattern={{ version }}

      - name: Login to Docker Hub for auditumio
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          username: auditumio
          password: ${{ secrets.DOCKERHUB_AUDITUMIO_TOKEN }}
        if: github.event_name != 'pull_request'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ${{ env.IMAGE_REGISTRY_GITHUB }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name != 'pull_request'

      # Used for arm images.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2.2.0
        with:
          platforms: ${{ env.IMAGE_PLATFORMS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2.9.1

      - name: Build and push Docker image
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4.1.1
        with:
          context: .
          platforms: ${{ env.IMAGE_PLATFORMS }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          push: ${{ github.event_name != 'pull_request' }}

  goreleaser:
    name: GoReleaser
    runs-on: ubuntu-latest
    needs:
      - build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          go-version-file: 'go.mod'

      - name: Download dependencies
        run: |
          go mod download

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@3fa32b8bb5620a2c1afe798654bbad59f9da4906 # v4.4.0
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_PREVIOUS_TAG: ""
