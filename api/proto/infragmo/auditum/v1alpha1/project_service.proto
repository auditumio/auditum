syntax = "proto3";

package infragmo.auditum.v1alpha1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "infragmo/auditum/v1alpha1/project.proto";

option go_package = "auditumv1alpha1";

service ProjectService {
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post: "/projects"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create project"
      description: "Creates a new project."
      tags: ["Projects"]
    };
  }

  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get: "/projects/{project_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get project"
      description: "Returns a project by its id."
      tags: ["Projects"]
    };
  }

  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/projects"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List projects"
      description: "Returns a list of projects by the provided criteria."
      tags: ["Projects"]
    };
  };

  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      patch: "/projects/{project.id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update project"
      description: "Updates an existing project."
      tags: ["Projects"]
    };
  };
}

message CreateProjectRequest {
  // Project to create.
  Project project = 1 [(google.api.field_behavior) = REQUIRED];
}

message CreateProjectResponse {
  // Created project.
  Project project = 1;
}

message GetProjectRequest {
  // ID of the record to get.
  string project_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetProjectResponse {
  // Found project.
  Project project = 1;
}

message ListProjectsRequest {
  // Describes a filter to apply to the list of projects.
  message Filter {}

  // Filter to apply to the list of projects.
  Filter filter = 1 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of projects to return. The service may return fewer than
  // this value.
  // If unspecified, at most 10 projects will be returned.
  // The maximum value is 100; values above 100 will be coerced to 100.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // A page token, received from a previous `ListProjects` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListProjects` must match
  // the call that provided the page token.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ListProjectsResponse {
  // Found projects.
  repeated Project projects = 1;

  // A token that can be sent as `page_token` to retrieve the next page.
  // If this field is empty, there are no subsequent pages.
  string next_page_token = 2;
}

message UpdateProjectRequest {
  // Project to update.
  Project project = 1 [(google.api.field_behavior) = REQUIRED];

  // Field mask indicating a list of fields to update.
  // Currently supported fields:
  // - `display_name`
  // - `update_record_enabled`
  // - `delete_record_enabled`
  // Support for other fields may be added in the future.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

message UpdateProjectResponse {
  // Updated project.
  Project project = 1;
}
