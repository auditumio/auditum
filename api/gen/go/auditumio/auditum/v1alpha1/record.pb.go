// Copyright 2023 Igor Zibarev
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: auditumio/auditum/v1alpha1/record.proto

package auditumv1alpha1

import (
	_ "github.com/auditumio/auditum/api/gen/go/google/api"
	_ "github.com/auditumio/auditum/api/gen/go/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumerates available operation statuses.
type OperationStatus_Enum int32

const (
	// Operation status not provided or unknown.
	OperationStatus_UNSPECIFIED OperationStatus_Enum = 0
	// Operation succeeded.
	OperationStatus_SUCCEEDED OperationStatus_Enum = 1
	// Operation failed.
	OperationStatus_FAILED OperationStatus_Enum = 2
)

// Enum value maps for OperationStatus_Enum.
var (
	OperationStatus_Enum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SUCCEEDED",
		2: "FAILED",
	}
	OperationStatus_Enum_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SUCCEEDED":   1,
		"FAILED":      2,
	}
)

func (x OperationStatus_Enum) Enum() *OperationStatus_Enum {
	p := new(OperationStatus_Enum)
	*p = x
	return p
}

func (x OperationStatus_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationStatus_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_auditumio_auditum_v1alpha1_record_proto_enumTypes[0].Descriptor()
}

func (OperationStatus_Enum) Type() protoreflect.EnumType {
	return &file_auditumio_auditum_v1alpha1_record_proto_enumTypes[0]
}

func (x OperationStatus_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationStatus_Enum.Descriptor instead.
func (OperationStatus_Enum) EnumDescriptor() ([]byte, []int) {
	return file_auditumio_auditum_v1alpha1_record_proto_rawDescGZIP(), []int{5, 0}
}

// Represents an audit record.
type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal record identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Identifier of the project the record belongs to.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Time when the record was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Labels for the record that can be used for filtering.
	// The labels are indexed, unlike metadata fields, which means it is possible
	// to find records by their labels.
	//
	// REQUIREMENTS.
	// Mandatory:
	// Keys must conform to the following regexp: [a-zA-Z0-9-_]+.
	// Keys must be at least 1 byte in length.
	// Configurable defaults:
	// Keys must be at most 64 bytes in length.
	// Values must be at most 256 bytes in length.
	// The total size of all keys and values must be at most 2048 bytes.
	//
	// EXAMPLE.
	// In an example social website domain, records for both POST and COMMENT
	// resources can be created with "post_id" label. This way all records related to the
	// post and its comments can be retrieved in chronological order with one
	// request by filtering with "post_id" label.
	//
	// BEST PRACTICE.
	//   - Add only labels that are critical for chronological retrieval of
	//     records related to multiple resources.
	//   - Do not add labels for standard fields (such as resource type) as they
	//     are already available for filtering.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Record resource.
	Resource *Resource `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`
	// Record operation.
	Operation *Operation `protobuf:"bytes,6,opt,name=operation,proto3" json:"operation,omitempty"`
	// Record actor.
	Actor *Actor `protobuf:"bytes,7,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_auditumio_auditum_v1alpha1_record_proto_rawDescGZIP(), []int{0}
}

func (x *Record) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Record) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Record) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Record) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Record) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Record) GetOperation() *Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *Record) GetActor() *Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Represents the audit record resource.
type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the resource.
	// This field may be used to distinguish different kinds of resources from
	// each other.
	//
	// REQUIREMENTS.
	// Configurable defaults:
	// The value must be at most 256 bytes in length.
	//
	// EXAMPLE.
	// In an example social website domain, the following resource types can be
	// used:
	// - POST for content post;
	// - COMMENT for comment to a post.
	//
	// BEST PRACTICE.
	//   - Match resource types according to your business domain model.
	//   - Keep the variety of resource types under control. This will make it
	//     easier to filter and analyze records.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Domain/application specific identifier of the resource.
	// This field uniquely identifies the resource.
	// The id must be unique within a `type`.
	//
	// REQUIREMENTS.
	// Configurable defaults:
	// The value must be at most 256 bytes in length.
	//
	// EXAMPLE.
	// In an example social website domain, the value can represent post id,
	// comment id, etc.
	// For singleton resources the name can be used as a resource identifier,
	// e.g. "site_settings" for global site settings that you want to audit.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Custom properties related to the resource.
	//
	// REQUIREMENTS.
	// Mandatory:
	// Keys must conform to the following regexp: [a-zA-Z0-9-_]+.
	// Keys must be at least 1 byte in length.
	// Configurable defaults:
	// Keys must be at most 64 bytes in length.
	// Values must be at most 256 bytes in length.
	// The total size of all keys and values must be at most 2048 bytes.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A list of changes for the resource.
	// This can be used to provide context into what is actually changed.
	//
	// REQUIREMENTS.
	// Configurable defaults:
	// The number of changes must be at most 20 changes.
	//
	// BEST PRACTICE.
	//   - Add only changes that are critical for audit trail. Do not add the whole
	//     resource as a change, as it will bloat the audit log, making it harder to
	//     trace truly important changes. Instead, add only the fields that were
	//     actually changed.
	//   - There are two strategies for recording operation about resource creation:
	//     1) Do not add any changes about resource creation.
	//     If a particular resource attribute was never changed, the state of the
	//     resource itself already provides information about this attribute.
	//     2) Add a change about resource creation with all resource fields. For
	//     updates, still follow the rule of adding only changed fields.
	Changes []*ResourceChange `protobuf:"bytes,4,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_auditumio_auditum_v1alpha1_record_proto_rawDescGZIP(), []int{1}
}

func (x *Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Resource) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Resource) GetChanges() []*ResourceChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

// Represents the audit record resource change item.
type ResourceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the change.
	// The name should answer the question "WHAT is changed?".
	// This may be used to distinguish different kinds of resource fields in the
	// set of changes.
	//
	// REQUIREMENTS.
	// Configurable defaults:
	// The value must be at most 256 bytes in length.
	//
	// EXAMPLE.
	// In an example social website domain, assuming we are recording post update
	// where its title was changed, this field can be set to "title".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Change description.
	// This provides human-readable description of this particular change.
	//
	// REQUIREMENTS.
	// Configurable defaults:
	// The value must be at most 1024 bytes in length.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Original value before the operation.
	//
	// REQUIREMENTS.
	// Configurable defaults:
	// The value must be at most 4096 bytes in length.
	OldValue *structpb.Value `protobuf:"bytes,3,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	// Changed value of after the operation.
	//
	// REQUIREMENTS.
	// Configurable defaults:
	// The value must be at most 4096 bytes in length.
	NewValue *structpb.Value `protobuf:"bytes,4,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
}

func (x *ResourceChange) Reset() {
	*x = ResourceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceChange) ProtoMessage() {}

func (x *ResourceChange) ProtoReflect() protoreflect.Message {
	mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceChange.ProtoReflect.Descriptor instead.
func (*ResourceChange) Descriptor() ([]byte, []int) {
	return file_auditumio_auditum_v1alpha1_record_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceChange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceChange) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResourceChange) GetOldValue() *structpb.Value {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *ResourceChange) GetNewValue() *structpb.Value {
	if x != nil {
		return x.NewValue
	}
	return nil
}

// Represents the audit record operation.
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the operation.
	// This field may be used to categorize operations / actions / events.
	//
	// REQUIREMENTS.
	// Configurable defaults:
	// The value must be at most 256 bytes in length.
	//
	// EXAMPLE.
	// In an example social website domain, the following operation types can be
	// used:
	// - CREATE when the post or comment is created;
	// - UPDATE when the post or comment post is updated;
	// - DELETE when the post or comment post is deleted.
	//
	// BEST PRACTICE.
	//   - Use `type` for high-level categorization and `id` for identification.
	//     For example, there can be multiple ways to create the resource: a user
	//     can create a resource from an app, an administrator can create a resource
	//     from the back office, a batch of resources can be created from the API -
	//     all of these operations can be of type CREATE.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Domain/application specific identifier of the operation.
	// This field identifies the operation that is audited.
	//
	// REQUIREMENTS.
	// Configurable defaults:
	// The value must be at most 512 bytes in length.
	//
	// EXAMPLE.
	// A few examples on how the operation for creating a post comment can be
	// identified:
	// - Simple identifier like "CreateComment"
	// - Event name, e.g. "CommentCreated"
	// - API operation for HTTP, e.g. "POST /posts/101/comments"
	// - API operation for gRPC, e.g. "example.v1.PostService/CreateComment"
	// - Serverless function name
	// - etc.
	//
	// BEST PRACTICE.
	//   - There might be different approaches to identifying operations, see EXAMPLE
	//     for ideas and suggestions. It is recommended to keep it consistent.
	//   - Remember that `type` field can be used for high-level categorization, so
	//     it is possible to have different operations with the same type. See `type`
	//     field description.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Time when the operation occurred.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// Custom properties related to the operation.
	//
	// REQUIREMENTS.
	// Mandatory:
	// Keys must conform to the following regexp: [a-zA-Z0-9-_]+.
	// Keys must be at least 1 byte in length.
	// Configurable defaults:
	// Keys must be at most 64 bytes in length.
	// Values must be at most 256 bytes in length.
	// The total size of all keys and values must be at most 2048 bytes.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Trace context related to the operation.
	TraceContext *TraceContext `protobuf:"bytes,5,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	// Status of the operation to distinguish whether it succeeded or failed.
	//
	// BEST PRACTICE.
	//   - Depending on your use case, it may be important not only to record
	//     completed operations, but failed attempts too. Use this field to
	//     distinguish the operation outcome.
	Status OperationStatus_Enum `protobuf:"varint,6,opt,name=status,proto3,enum=auditumio.auditum.v1alpha1.OperationStatus_Enum" json:"status,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_auditumio_auditum_v1alpha1_record_proto_rawDescGZIP(), []int{3}
}

func (x *Operation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Operation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Operation) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Operation) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Operation) GetTraceContext() *TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

func (x *Operation) GetStatus() OperationStatus_Enum {
	if x != nil {
		return x.Status
	}
	return OperationStatus_UNSPECIFIED
}

// Represents the audit record operation trace context.
//
// Adheres to the W3C Trace Context specification.
// See: https://www.w3.org/TR/trace-context/
type TraceContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Traceparent Header value.
	//
	// REQUIREMENTS.
	// Mandatory:
	// Must be valid W3C traceparent header value.
	// See: https://www.w3.org/TR/trace-context/#traceparent-header
	Traceparent string `protobuf:"bytes,1,opt,name=traceparent,proto3" json:"traceparent,omitempty"`
	// Tracestate Header value.
	//
	// REQUIREMENTS.
	// Mandatory:
	// Must be valid W3C tracestate header value.
	// See: https://www.w3.org/TR/trace-context/#tracestate-header
	// Maximum length of the tracestate is 512 bytes.
	// Can be provided only if valid traceparent is provided as well.
	Tracestate string `protobuf:"bytes,2,opt,name=tracestate,proto3" json:"tracestate,omitempty"`
}

func (x *TraceContext) Reset() {
	*x = TraceContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceContext) ProtoMessage() {}

func (x *TraceContext) ProtoReflect() protoreflect.Message {
	mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceContext.ProtoReflect.Descriptor instead.
func (*TraceContext) Descriptor() ([]byte, []int) {
	return file_auditumio_auditum_v1alpha1_record_proto_rawDescGZIP(), []int{4}
}

func (x *TraceContext) GetTraceparent() string {
	if x != nil {
		return x.Traceparent
	}
	return ""
}

func (x *TraceContext) GetTracestate() string {
	if x != nil {
		return x.Tracestate
	}
	return ""
}

// Wraps operation status enumeration.
type OperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OperationStatus) Reset() {
	*x = OperationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStatus) ProtoMessage() {}

func (x *OperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStatus.ProtoReflect.Descriptor instead.
func (*OperationStatus) Descriptor() ([]byte, []int) {
	return file_auditumio_auditum_v1alpha1_record_proto_rawDescGZIP(), []int{5}
}

// Represents the audit record actor.
type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the actor.
	// This field may be used to distinguish different kinds of actors from
	// each other.
	//
	// REQUIREMENTS.
	// Configurable defaults:
	// The value must be at most 256 bytes in length.
	//
	// EXAMPLE.
	// In an example social website domain, the following actor types can be used:
	//   - USER for a person that updates the post;
	//   - SERVICE_ACCOUNT for a system that automatically archives posts when
	//     they become outdated.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Domain/application specific identifier of the actor.
	// This field uniquely identifies the actor who triggered the operation.
	// The id must be unique within a `type`.
	//
	// REQUIREMENTS.
	// Configurable defaults:
	// The value must be at most 256 bytes in length.
	//
	// BEST PRACTICE.
	//   - The id may refer to a user (staff, customer, etc) or to a system
	//     (service account, etc), depending on the context of the operation.
	//   - This field is required. If, for any reason, there is a case when it is
	//     impossible or not desirable to provide actor identity, use a consistent
	//     stub value like "unknown".
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Custom properties related to the actor.
	//
	// REQUIREMENTS.
	// Mandatory:
	// Keys must conform to the following regexp: [a-zA-Z0-9-_]+.
	// Keys must be at least 1 byte in length.
	// Configurable defaults:
	// Keys must be at most 64 bytes in length.
	// Values must be at most 256 bytes in length.
	// The total size of all keys and values must be at most 2048 bytes.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Actor) Reset() {
	*x = Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_auditumio_auditum_v1alpha1_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_auditumio_auditum_v1alpha1_record_proto_rawDescGZIP(), []int{6}
}

func (x *Actor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Actor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Actor) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_auditumio_auditum_v1alpha1_record_proto protoreflect.FileDescriptor

var file_auditumio_auditum_v1alpha1_record_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41,
	0x0f, 0xca, 0x3e, 0x0c, 0xfa, 0x02, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x10,
	0xca, 0x3e, 0x0d, 0xfa, 0x02, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x45, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x02, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75,
	0x6d, 0x69, 0x6f, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x09, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x52, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75,
	0x6d, 0x69, 0x6f, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5a, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x25, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x45, 0x0a, 0x0f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x32, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x22, 0xc4, 0x01, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x8b, 0x02, 0x0a, 0x1e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0b, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x52, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d,
	0x69, 0x6f, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x3b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xa2, 0x02, 0x03, 0x41, 0x41, 0x58, 0xaa, 0x02, 0x1a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d,
	0x69, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0xca, 0x02, 0x1a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x5c,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xe2, 0x02, 0x26, 0x41, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x69, 0x6f, 0x5c, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x75, 0x6d, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x75, 0x6d, 0x69, 0x6f, 0x3a, 0x3a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x75, 0x6d, 0x3a, 0x3a,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auditumio_auditum_v1alpha1_record_proto_rawDescOnce sync.Once
	file_auditumio_auditum_v1alpha1_record_proto_rawDescData = file_auditumio_auditum_v1alpha1_record_proto_rawDesc
)

func file_auditumio_auditum_v1alpha1_record_proto_rawDescGZIP() []byte {
	file_auditumio_auditum_v1alpha1_record_proto_rawDescOnce.Do(func() {
		file_auditumio_auditum_v1alpha1_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_auditumio_auditum_v1alpha1_record_proto_rawDescData)
	})
	return file_auditumio_auditum_v1alpha1_record_proto_rawDescData
}

var file_auditumio_auditum_v1alpha1_record_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_auditumio_auditum_v1alpha1_record_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_auditumio_auditum_v1alpha1_record_proto_goTypes = []interface{}{
	(OperationStatus_Enum)(0),     // 0: auditumio.auditum.v1alpha1.OperationStatus.Enum
	(*Record)(nil),                // 1: auditumio.auditum.v1alpha1.Record
	(*Resource)(nil),              // 2: auditumio.auditum.v1alpha1.Resource
	(*ResourceChange)(nil),        // 3: auditumio.auditum.v1alpha1.ResourceChange
	(*Operation)(nil),             // 4: auditumio.auditum.v1alpha1.Operation
	(*TraceContext)(nil),          // 5: auditumio.auditum.v1alpha1.TraceContext
	(*OperationStatus)(nil),       // 6: auditumio.auditum.v1alpha1.OperationStatus
	(*Actor)(nil),                 // 7: auditumio.auditum.v1alpha1.Actor
	nil,                           // 8: auditumio.auditum.v1alpha1.Record.LabelsEntry
	nil,                           // 9: auditumio.auditum.v1alpha1.Resource.MetadataEntry
	nil,                           // 10: auditumio.auditum.v1alpha1.Operation.MetadataEntry
	nil,                           // 11: auditumio.auditum.v1alpha1.Actor.MetadataEntry
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(*structpb.Value)(nil),        // 13: google.protobuf.Value
}
var file_auditumio_auditum_v1alpha1_record_proto_depIdxs = []int32{
	12, // 0: auditumio.auditum.v1alpha1.Record.create_time:type_name -> google.protobuf.Timestamp
	8,  // 1: auditumio.auditum.v1alpha1.Record.labels:type_name -> auditumio.auditum.v1alpha1.Record.LabelsEntry
	2,  // 2: auditumio.auditum.v1alpha1.Record.resource:type_name -> auditumio.auditum.v1alpha1.Resource
	4,  // 3: auditumio.auditum.v1alpha1.Record.operation:type_name -> auditumio.auditum.v1alpha1.Operation
	7,  // 4: auditumio.auditum.v1alpha1.Record.actor:type_name -> auditumio.auditum.v1alpha1.Actor
	9,  // 5: auditumio.auditum.v1alpha1.Resource.metadata:type_name -> auditumio.auditum.v1alpha1.Resource.MetadataEntry
	3,  // 6: auditumio.auditum.v1alpha1.Resource.changes:type_name -> auditumio.auditum.v1alpha1.ResourceChange
	13, // 7: auditumio.auditum.v1alpha1.ResourceChange.old_value:type_name -> google.protobuf.Value
	13, // 8: auditumio.auditum.v1alpha1.ResourceChange.new_value:type_name -> google.protobuf.Value
	12, // 9: auditumio.auditum.v1alpha1.Operation.time:type_name -> google.protobuf.Timestamp
	10, // 10: auditumio.auditum.v1alpha1.Operation.metadata:type_name -> auditumio.auditum.v1alpha1.Operation.MetadataEntry
	5,  // 11: auditumio.auditum.v1alpha1.Operation.trace_context:type_name -> auditumio.auditum.v1alpha1.TraceContext
	0,  // 12: auditumio.auditum.v1alpha1.Operation.status:type_name -> auditumio.auditum.v1alpha1.OperationStatus.Enum
	11, // 13: auditumio.auditum.v1alpha1.Actor.metadata:type_name -> auditumio.auditum.v1alpha1.Actor.MetadataEntry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_auditumio_auditum_v1alpha1_record_proto_init() }
func file_auditumio_auditum_v1alpha1_record_proto_init() {
	if File_auditumio_auditum_v1alpha1_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_auditumio_auditum_v1alpha1_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auditumio_auditum_v1alpha1_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auditumio_auditum_v1alpha1_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auditumio_auditum_v1alpha1_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auditumio_auditum_v1alpha1_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auditumio_auditum_v1alpha1_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auditumio_auditum_v1alpha1_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auditumio_auditum_v1alpha1_record_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_auditumio_auditum_v1alpha1_record_proto_goTypes,
		DependencyIndexes: file_auditumio_auditum_v1alpha1_record_proto_depIdxs,
		EnumInfos:         file_auditumio_auditum_v1alpha1_record_proto_enumTypes,
		MessageInfos:      file_auditumio_auditum_v1alpha1_record_proto_msgTypes,
	}.Build()
	File_auditumio_auditum_v1alpha1_record_proto = out.File
	file_auditumio_auditum_v1alpha1_record_proto_rawDesc = nil
	file_auditumio_auditum_v1alpha1_record_proto_goTypes = nil
	file_auditumio_auditum_v1alpha1_record_proto_depIdxs = nil
}
